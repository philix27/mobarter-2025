// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name ParticleMPCCore
import Base58_swift
import CryptoSwift
import Foundation
@_exported import ParticleMPCCore
import Swift
import SwiftyJSON
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ThreshError : Swift.Error, Swift.CustomStringConvertible {
  public let code: Swift.Int?
  public let message: Swift.String?
  public var data: Swift.String?
  public static let paramsError: ParticleMPCCore.ThreshError
  public init(code: Swift.Int?, message: Swift.String?, data: Swift.String? = nil)
  public var description: Swift.String {
    get
  }
}
public enum ThreshSwift {
  #if compiler(>=5.3) && $AsyncAwait
  public static func eddsaKeyGen(endPoint: Swift.String, params: Swift.String) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func eddsaSign(endPoint: Swift.String, params: Swift.String, message: Swift.String, key: Swift.String) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func ecdsaKeyGen(endPoint: Swift.String, params: Swift.String) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func ecdsaSign(endPoint: Swift.String, params: Swift.String, message: Swift.String, key: Swift.String, unique: Swift.Bool = false) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func ecdsaSignTx(endPoint: Swift.String, params: Swift.String, message: Swift.String, key: Swift.String) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func ecdsaRotate(endPoint: Swift.String, params: Swift.String, key: Swift.String) async throws -> Swift.String
  #endif
  public static func ecdsaPub(key: Swift.String) throws -> Swift.String
  public static func hashPassword(password: Swift.String, salt: Swift.String) throws -> Swift.String
  public static func encrypt(plainText: Swift.String, key: Swift.String) throws -> Swift.String
  public static func decrypt(ciphertext: Swift.String, key: Swift.String) throws -> Swift.String
}
@_hasMissingDesignatedInitializers public class Ecdsa {
  #if compiler(>=5.3) && $AsyncAwait
  public static func gen(endPoint: Swift.String, params: Swift.String) async throws -> ParticleMPCCore.Ecdsa
  #endif
  public static func from(jsonString: Swift.String) -> ParticleMPCCore.Ecdsa
  public func to() -> Swift.String
  #if compiler(>=5.3) && $AsyncAwait
  public func sign(endPoint: Swift.String, params: Swift.String, message: Swift.String, unique: Swift.Bool) async throws -> Swift.String
  #endif
  public func pub() throws -> [Swift.UInt8]
  #if compiler(>=5.3) && $AsyncAwait
  public func signTx(endPoint: Swift.String, params: Swift.String, tx: Swift.String) async throws -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func refresh(endPoint: Swift.String, params: Swift.String) async throws -> ParticleMPCCore.Ecdsa
  #endif
  @objc deinit
}
extension ParticleMPCCore.Ecdsa {
  public func getPublicAddress() throws -> Swift.String
}
@_hasMissingDesignatedInitializers public class EdDsa {
  #if compiler(>=5.3) && $AsyncAwait
  public static func gen(endPoint: Swift.String, params: Swift.String) async throws -> ParticleMPCCore.EdDsa
  #endif
  public static func from(jsonString: Swift.String) -> ParticleMPCCore.EdDsa
  public func to() -> Swift.String
  #if compiler(>=5.3) && $AsyncAwait
  public func sign(endPoint: Swift.String, params: Swift.String, message: Swift.String) async throws -> Swift.String
  #endif
  public func pub() -> [Swift.UInt8]
  #if compiler(>=5.3) && $AsyncAwait
  public func batchSign(endPoint: Swift.String, params: Swift.String, messages: [Swift.String]) async throws -> [Swift.String]
  #endif
  @objc deinit
}
extension ParticleMPCCore.EdDsa {
  public func getPublicAddress() -> Swift.String
}
public enum Helper {
  public static func generateKey(password: Swift.String, salt: Swift.String) throws -> Swift.String
  public static func decryptData(_ data: Swift.String, key: Swift.String) throws -> Swift.String
  public static func encryptData(_ data: Swift.String, key: Swift.String) throws -> Swift.String
}
