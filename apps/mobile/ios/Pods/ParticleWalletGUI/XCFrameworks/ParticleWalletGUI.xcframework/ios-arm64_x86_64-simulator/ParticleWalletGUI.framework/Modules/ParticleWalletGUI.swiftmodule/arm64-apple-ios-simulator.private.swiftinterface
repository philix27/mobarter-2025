// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name ParticleWalletGUI
import AVFoundation
import Alamofire
import Base58_swift
import Combine
import ConnectCommon
import CryptoSwift
import Foundation
import GLTFSceneKit
import GRDB
import JXPagingView
import JXSegmentedView
import MJRefresh
import ParticleNetworkBase
import ParticleNetworkChains
import ParticleWalletAPI
import ParticleWalletConnect
@_exported import ParticleWalletGUI
import RxAlamofire
import RxCocoa
import RxRelay
import RxSwift
import SDWebImage
import SDWebImageSwiftUI
import SDWebImageWebPCoder
import SafariServices
import SceneKit
import SkeletonView
import SnapKit
import Swift
import SwiftMessages
import SwiftUI
import SwiftyJSON
import SwiftyUserDefaults
import Then
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ParticleWeb3Provider {
  public static let scriptHandlerName: Swift.String
  public var providerScript: WebKit.WKUserScript {
    get
  }
  public var injectScript: WebKit.WKUserScript {
    get
  }
  public init()
}
@_inheritsConvenienceInitializers @objc public class ParticleWalletGUI : ObjectiveC.NSObject {
  public static func initialize(adapters: [any ConnectCommon.ConnectAdapter])
  @objc public static func setPayDisabled(_ disable: Swift.Bool = false)
  @objc public static func getPayDisabled() -> Swift.Bool
  @objc public static func setSwapDisabled(_ disable: Swift.Bool = false)
  @objc public static func setBridgeDisabled(_ disable: Swift.Bool = false)
  @objc public static func getSwapDisabled() -> Swift.Bool
  @objc public static func getBridgeDisabled() -> Swift.Bool
  @objc public static func setShowTestNetwork(_ isShowTestNetwork: Swift.Bool = false)
  @objc public static func setShowManageWallet(_ isShowManageWallet: Swift.Bool = true)
  @objc public static func setShowLanguageSetting(_ isShowLanguageSetting: Swift.Bool = false)
  @objc public static func setShowAppearanceSetting(_ isShowAppearanceSetting: Swift.Bool = false)
  @objc public static func setShowSmartAccountSetting(_ isShowSmartAccountSetting: Swift.Bool = true)
  @objc public static func setSupportWalletConnect(_ isSupportWalletConnect: Swift.Bool = true)
  @objc public static func setSupportDappBrowser(_ isSupportDappBrowser: Swift.Bool = true)
  @objc public static func setSupportChain(_ chains: Swift.Set<ParticleNetworkChains.ChainInfo>)
  public static func switchWallet(walletType: ConnectCommon.WalletType, publicAddress: Swift.String) -> Swift.Bool
  public static func setSupportAddToken(_ enable: Swift.Bool = true)
  public static func setDisplayTokenAddresses(_ tokenAddresses: [Swift.String]?)
  public static func setPriorityTokenAddresses(_ tokenAddresses: [Swift.String]?)
  public static func setDisplayNFTContractAddresses(_ nftContractAddresses: [Swift.String]?)
  public static func setPriorityNFTContractAddresses(_ nftContractAddresses: [Swift.String]?)
  public static func setCustomTokenAddresses(_ tokenAddresses: [Swift.String])
  public static func setCustomLocalizable(_ customLocalizable: [Language : [Swift.String : Swift.String]])
  public static func handleWalletConnectUrl(_ url: Foundation.URL, withScheme scheme: Swift.String) -> Swift.Bool
  public static func setAdapters(_ adapters: [any ConnectCommon.ConnectAdapter])
  @objc override dynamic public init()
  @objc deinit
}
extension ParticleWalletGUI {
  @available(*, deprecated, renamed: "setPayDisabled")
  @objc public static func enablePay(_ enable: Swift.Bool = true)
  @available(*, deprecated, renamed: "getPayDisabled")
  @objc public static func getEnablePay() -> Swift.Bool
  @available(*, deprecated, renamed: "setSwapDisabled")
  @objc public static func enableSwap(_ enable: Swift.Bool = true)
  @available(*, deprecated, renamed: "getSwapDisabled")
  @objc public static func getEnableSwap() -> Swift.Bool
  @available(*, deprecated, renamed: "setSupportWalletConnect")
  @objc public static func supportWalletConnect(_ isSupportWalletConnect: Swift.Bool = true)
  @available(*, deprecated, renamed: "ParticleNetwork.setCustomUIConfigJsonString")
  public static func loadCustomUIJsonString(_ jsonString: Swift.String) throws
  @available(*, deprecated, renamed: "setSupportDappBrowser")
  @objc public static func supportDappBrowser(_ isSupportDappBrowser: Swift.Bool = true)
  @available(*, deprecated, renamed: "setShowTestNetwork")
  @objc public static func showTestNetwork(_ isShowTestNetwork: Swift.Bool = false)
  @available(*, deprecated, renamed: "setSupportChain")
  @objc public static func supportChain(_ chains: Swift.Set<ParticleNetworkChains.ChainInfo>)
  @available(*, deprecated, renamed: "setShowManageWallet")
  @objc public static func showManageWallet(_ isShowManageWallet: Swift.Bool = true)
  @available(*, deprecated, renamed: "setShowLanguageSetting")
  @objc public static func showLanguageSetting(_ isShowLanguageSetting: Swift.Bool = false)
  @available(*, deprecated, renamed: "setShowAppearanceSetting")
  @objc public static func showAppearanceSetting(_ isShowAppearanceSetting: Swift.Bool = false)
}
public protocol SwapQuoteResultPresentation {
  var fromTokenAmount: BInt { get }
  var toTokenAmount: BInt { get }
  var gasLimit: BInt { get }
  var totalFees: BInt { get }
  var minimumSol: BInt { get }
  var priceImpactPct: Swift.Double { get }
}
extension SolanaChain.SolanaSwapQuoteResult : SwapQuoteResultPresentation {
  public var fromTokenAmount: BInt {
    get
  }
  public var toTokenAmount: BInt {
    get
  }
  public var gasLimit: BInt {
    get
  }
  public var totalFees: BInt {
    get
  }
  public var minimumSol: BInt {
    get
  }
}
extension EVMChain.EVMSwapQuoteResult : SwapQuoteResultPresentation {
  public var priceImpactPct: Swift.Double {
    get
  }
  public var gasLimit: BInt {
    get
  }
  public var totalFees: BInt {
    get
  }
  public var minimumSol: BInt {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PNRouter : ObjectiveC.NSObject {
  @objc deinit
}
extension PNRouter {
  @objc public enum Display : Swift.Int {
    case token
    case nft
    case activity
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static func navigatorWallet(display: PNRouter.Display = .token, hiddenBackButton: Swift.Bool = false, animated: Swift.Bool = true)
  @objc public static func extractWallet(display: PNRouter.Display = .token, hiddenBackButton: Swift.Bool = false) -> UIKit.UIViewController?
  @objc public static func navigatorTokenReceive(tokenReceiveConfig: TokenReceiveConfig? = nil)
  @objc public static func navigatorTokenSend(tokenSendConfig: TokenSendConfig? = nil, modalStyle: ParticleGUIModalStyle = .pageSheet)
  @objc public static func navigatorTokenTransactionRecords(tokenTransactionRecordsConfig: TokenTransactionRecordsConfig? = nil)
  @objc public static func navigatorNFTSend(nftSendConfig: NFTSendConfig)
  @objc public static func navigatorNFTDetails(nftDetailsConfig: NFTDetailsConfig)
  @available(*, deprecated, renamed: "navigatorBuy")
  @objc public static func navigatorPay()
  public static func navigatorBuy(walletAddress: Swift.String? = nil, network: ParticleNetworkChains.ChainInfo? = nil, cryptoCoin: Swift.String? = nil, fiatCoin: Swift.String? = nil, fiatAmt: Swift.Int? = nil, modalStyle: ParticleGUIModalStyle = .pageSheet)
  public static func navigatorBuy(buyCryptoConfig: BuyCryptoConfig, modalStyle: ParticleGUIModalStyle = .pageSheet)
  public static func navigatorImportSolanaPrivateKey() -> RxSwift.Single<ConnectCommon.Account>
  public static func navigatorImportEvmPrivateKey() -> RxSwift.Single<ConnectCommon.Account>
  @objc public static func navigatorSwap(swapConfig: SwapConfig? = nil, modalStyle: ParticleGUIModalStyle = .pageSheet)
  public static func navigatorBridge(modalStyle: ParticleGUIModalStyle = .pageSheet)
  public static func navigatorLoginList(supportTypes: [LoginListSupportType] = LoginListSupportType.allCases) -> RxSwift.Single<ConnectCommon.Account>
  public static func navigatorDappBrowser(url: Foundation.URL?)
}
@objc public enum ParticleGUIModalStyle : Swift.Int {
  case pageSheet = 0
  case fullScreen = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class TokenReceiveConfig : ObjectiveC.NSObject {
  final public let tokenAddress: Swift.String?
  @objc public init(tokenAddress: Swift.String?)
  @objc deinit
}
@objc public class TokenSendConfig : ObjectiveC.NSObject {
  final public let tokenAddress: Swift.String?
  final public let toAddress: Swift.String?
  final public let amount: BInt?
  public init(tokenAddress: Swift.String?, toAddress: Swift.String? = nil, amount: BInt? = nil)
  @objc public init(tokenAddress: Swift.String?, toAddress: Swift.String? = nil, amountString: Swift.String? = nil)
  @objc deinit
}
@objc public class TokenTransactionRecordsConfig : ObjectiveC.NSObject {
  final public let tokenAddress: Swift.String
  @objc public init(tokenAddress: Swift.String)
  @objc deinit
}
@objc public class NFTDetailsConfig : ObjectiveC.NSObject {
  final public let address: Swift.String
  final public let tokenId: Swift.String
  @objc public init(address: Swift.String, tokenId: Swift.String)
  @objc deinit
}
@objc public class NFTSendConfig : ObjectiveC.NSObject {
  final public let address: Swift.String
  final public let toAddress: Swift.String?
  final public let tokenId: Swift.String
  final public let amount: BInt?
  public init(address: Swift.String, toAddress: Swift.String?, tokenId: Swift.String, amount: BInt? = nil)
  @objc public init(address: Swift.String, toAddress: Swift.String?, tokenId: Swift.String, amountString: Swift.String? = nil)
  @objc deinit
}
@objc public class SwapConfig : ObjectiveC.NSObject {
  final public let fromTokenAddress: Swift.String?
  final public let toTokenAddress: Swift.String?
  final public let fromTokenAmount: BInt?
  public init(fromTokenAddress: Swift.String? = nil, toTokenAddress: Swift.String? = nil, fromTokenAmount: BInt? = nil)
  public init(fromTokenAddress: Swift.String? = nil, toTokenAddress: Swift.String? = nil, fromTokenAmountString: Swift.String? = nil)
  @objc deinit
}
public struct BuyCryptoConfig {
  public var walletAddress: Swift.String?
  public var network: ParticleNetworkChains.ChainInfo?
  public var cryptoCoin: Swift.String?
  public var fiatAmt: Swift.Int?
  public var fiatCoin: Swift.String
  public var fixFiatCoin: Swift.Bool
  public var fixFiatAmt: Swift.Bool
  public var fixCryptoCoin: Swift.Bool
  public var theme: Swift.String
  public var language: Swift.String
  public init()
  public init(walletAddress: Swift.String?, network: ParticleNetworkChains.ChainInfo?, cryptoCoin: Swift.String?, fiatAmt: Swift.Int?, fiatCoin: Swift.String, fixFiatCoin: Swift.Bool, fixFiatAmt: Swift.Bool, fixCryptoCoin: Swift.Bool, theme: Swift.String, language: Swift.String)
  public static func defaultConfig(walletAddress: Swift.String) -> BuyCryptoConfig
  public func exportLink() -> Swift.String?
}
@objc public enum RouterPath : Swift.Int, Swift.RawRepresentable {
  case wallet
  case tokenReceive
  case tokenSend
  case tokenTransactionRecords
  case nftDetails
  case nftSend
  case pay
  case newWallet
  case selectWalletConnect
  case importPrivateKey
  case swap
  case loginList
  case dappBrowser
  case bridge
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
extension CoreFoundation.CGRect {
  public var center: CoreFoundation.CGPoint {
    get
  }
}
extension CoreFoundation.CGRect {
  public init(center: CoreFoundation.CGPoint, size: CoreFoundation.CGSize)
}
extension JXPagingListContainerView : JXSegmentedViewListContainer {
}
extension ConnectCommon.WalletType : SwiftyUserDefaults.DefaultsSerializable {
  public static var _defaults: SwiftyUserDefaults.DefaultsCodableBridge<ConnectCommon.WalletType> {
    get
  }
  public static var _defaultsArray: SwiftyUserDefaults.DefaultsCodableBridge<[ConnectCommon.WalletType]> {
    get
  }
}
extension UIKit.UITextView : UIKit.NSTextStorageDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textStorage(_: UIKit.NSTextStorage, didProcessEditing editedMask: UIKit.NSTextStorage.EditActions, range _: Foundation.NSRange, changeInLength _: Swift.Int)
}
public enum LoginListSupportType : Swift.CaseIterable {
  case email
  case phone
  case google
  case facebook
  case apple
  case discord
  case github
  case twitch
  case microsoft
  case linkedin
  case privateKey
  case metamask
  case rainbow
  case trust
  case imtoken
  case bitget
  case walletConnect
  case phantom
  case twitter
  public static func == (a: LoginListSupportType, b: LoginListSupportType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [LoginListSupportType]
  public static var allCases: [LoginListSupportType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension PNRouter.Display : Swift.Equatable {}
extension PNRouter.Display : Swift.Hashable {}
extension PNRouter.Display : Swift.RawRepresentable {}
extension ParticleGUIModalStyle : Swift.Equatable {}
extension ParticleGUIModalStyle : Swift.Hashable {}
extension ParticleGUIModalStyle : Swift.RawRepresentable {}
extension RouterPath : Swift.Equatable {}
extension RouterPath : Swift.Hashable {}
extension LoginListSupportType : Swift.Equatable {}
extension LoginListSupportType : Swift.Hashable {}
