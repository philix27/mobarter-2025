import AuthWrapper from "@/components/AuthWrapper";
import { ThemedText } from "@/components/ThemedText";
import { ThemedView } from "@/components/ThemedView";
import InputText from "@/components/forms/InputText";
import ApiHooks from "@/lib/endpoints";
import { Link } from "expo-router";
import React from "react";
import { z } from "zod";
import { StyleSheet, Alert } from "react-native";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

// Define the validation schema
const formSchema = z.object({
  email: z.string().email("Invalid email format"),
  password: z.string().min(6, "Password must be at least 6 characters"),
});

export default function SignInPage() {
  const { handleSubmit, setValue, formState, getValues } = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  const { mutate } = ApiHooks.useAuthLogin();

  const { errors } = formState;

  const onSubmit = (data: any) => {
    console.log("Submit hit");
    mutate({
      variables: {
        email: getValues("email"),
        password: getValues("password"),
      },
    });

    Alert.alert("Success", "Form submitted successfully!");
    console.log(data);
  };

  return (
    <AuthWrapper
      title="Login"
      btnTitle="Login"
      subtitle="Welcome back"
      onPress={() => {
        console.log("handleSubmit hit");
        handleSubmit(onSubmit);
      }}
      bottomText={"Do not have an account?"}
      linkHref="/auth/sign-up"
      linkText="Sign up"
    >
      <ThemedView>
        <InputText
          label={"Email"}
          keyboardType="email-address"
          onChangeText={(text) => setValue("email", text)}
          placeholder={"Enter email"}
          error={errors.email === undefined ? undefined : errors.email.message}
        />

        <InputText
          label={"Password"}
          onChangeText={(text) => setValue("password", text)}
          placeholder={"Enter password"}
          secureTextEntry={true}
          error={
            errors.password === undefined ? undefined : errors.password.message
          }
        />

        <ThemedView style={{ paddingTop: 5, marginBottom: 10 }}>
          <Link href={"/auth/reset-email"}>
            <ThemedText type="link">Forgot Password</ThemedText>
          </Link>
        </ThemedView>
      </ThemedView>
    </AuthWrapper>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 5,
  },
  input: {
    height: 40,
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 8,
    paddingHorizontal: 10,
    marginBottom: 10,
  },
  error: {
    color: "red",
    marginBottom: 10,
  },
});
