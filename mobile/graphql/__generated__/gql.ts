/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "mutation Adverts_update($input: Advert_UpdateInput!) {\n  adverts_update(input: $input) {\n    currencyFiat\n    currency_crypto\n    advertStatus\n    duration\n    merchant_id\n    limitLower\n    limitUpper\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n  }\n}\n\nmutation Adverts_create($input: Advert_CreateInput!) {\n  adverts_create(input: $input) {\n    rateFixed\n    rateFloat\n    merchant_id\n    isFloatRate\n    advertStatus\n    limitLower\n    limitUpper\n    tradeType\n    currencyFiat\n    currency_crypto\n    wallet_address\n  }\n}\n\nmutation Adverts_delete($input: Advert_DeleteInput!) {\n  adverts_delete(input: $input) {\n    merchant_id\n    rateFixed\n    rateFloat\n    isFloatRate\n    currencyFiat\n    currency_crypto\n    advertStatus\n    duration\n    limitLower\n    limitUpper\n    tradeType\n    wallet_address\n  }\n}\n\nquery Adverts_getAll {\n  adverts_getAll {\n    id\n    rateFixed\n    rateFloat\n    isFloatRate\n    advertStatus\n    duration\n    tradeType\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}\n\nquery Adverts_getOne($input: Advert_GetOneInput!) {\n  adverts_getOne(input: $input) {\n    id\n    advertStatus\n    duration\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}\n\nquery Adverts_getMerchantAdverts($input: Advert_GetAllInput!) {\n  adverts_getMerchantAdverts(input: $input) {\n    id\n    advertStatus\n    duration\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}": typeof types.Adverts_UpdateDocument,
    "mutation Auth_minipayLogin($input: Auth_LoginMinipayInput!) {\n  auth_minipayLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_minipayCreateAccount($input: Auth_MinipayCreateAccountInput!) {\n  auth_minipayCreateAccount(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_login($input: Auth_LoginInput!) {\n  auth_login(input: $input) {\n    firstname\n    country\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_resetPassword($input: Auth_ResetPasswordInput!) {\n  auth_resetPassword(input: $input) {\n    message\n  }\n}\n\nmutation Auth_sendEmailOtp($input: Auth_sendEmailOtpInput!) {\n  auth_sendEmailOtp(input: $input) {\n    message\n    token\n  }\n}\n\nmutation Auth_verifyEmailOtp($input: Auth_verifyEmailOtpInput!) {\n  auth_verifyEmailOtp(input: $input) {\n    message\n  }\n}\n\nmutation Auth_CreateAccount($input: Auth_CreateAccountInput!) {\n  auth_createAccount(input: $input) {\n    message\n  }\n}\n\nmutation Auth_thirdwebLogin($input: Auth_ThirdwebLoginInput!) {\n  auth_thirdwebLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}": typeof types.Auth_MinipayLoginDocument,
    "mutation BankAccount_delete($input: BankAccount_DeleteInput!) {\n  bankAccount_delete(input: $input) {\n    message\n  }\n}\n\nmutation BankAccount_create($input: BankAccount_CreateInput!) {\n  bankAccount_create(input: $input) {\n    id\n    account_no\n    account_name\n    bank_name\n  }\n}\n\nquery BankAccount_getAll {\n  bankAccount_getAll {\n    id\n    account_name\n    account_no\n    bank_name\n  }\n}\n\nquery BankList {\n  bankList {\n    bankCode\n    bankName\n  }\n}\n\nquery Bank_verifyAccountNo($input: BankGetAccountName_Input!) {\n  bank_verifyAccountNo(input: $input) {\n    account_name\n    account_number\n  }\n}": typeof types.BankAccount_DeleteDocument,
    "query FxRate_GetAll {\n  fxRate_GetAll {\n    GH\n    NG\n    KE\n    UG\n    MW\n    TZ\n    ZA\n    USD\n    EUR\n  }\n}": typeof types.FxRate_GetAllDocument,
    "mutation Kyc_addAddressInfo($input: Kyc_AddAddressInfoInput!) {\n  kyc_addAddressInfo(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addAddressProof($input: Kyc_AddAddressProofInput!) {\n  kyc_addAddressProof(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addBvn($input: Kyc_AddBvnInput!) {\n  kyc_addBvn(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addDob($input: Kyc_AddDobInput!) {\n  kyc_addDob(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNames($input: Kyc_AddNamesInput!) {\n  kyc_addNames(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNin($input: Kyc_AddNinInput!) {\n  kyc_addNin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_createTransactionPin($input: Kyc_CreateTransactionPinInput!) {\n  kyc_createTransactionPin(input: $input) {\n    message\n  }\n}": typeof types.Kyc_AddAddressInfoDocument,
    "mutation Orders_CreateSell($input: Order_CreteSellInput!) {\n  orders_CreateSell(input: $input) {\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetAll($input: Order_GetAllInput!) {\n  orders_GetAll(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetOne($input: Order_GetOneInput!) {\n  orders_GetOne(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetAllForAdmin($input: Order_GetAllInput!) {\n  orders_GetAllForAdmin(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}": typeof types.Orders_CreateSellDocument,
    "mutation Auth_TelegramLogin($input: Auth_TelegramLoginInput!) {\n  auth_loginTelegram(input: $input) {\n    token\n    email\n    firstname\n    lastname\n  }\n}": typeof types.Auth_TelegramLoginDocument,
    "query Transactions_getAll {\n  transactions_getAll {\n    amount\n    category\n    mode\n    note\n    transaction_hash\n    status\n  }\n}": typeof types.Transactions_GetAllDocument,
    "query User_getAll {\n  user_getAll {\n    telegram_id\n    id\n    country\n    phone\n    firstname\n    lastname\n    middlename\n    email\n  }\n}": typeof types.User_GetAllDocument,
    "mutation Utility_purchaseAirtime($input: Utilities_PurchaseAirtimeInput!) {\n  utility_purchaseAirtime(input: $input) {\n    message\n  }\n}\n\nmutation Utility_purchaseDataBundle($input: Utilities_PurchaseDataBundleInput!) {\n  utility_purchaseDataBundle(input: $input) {\n    message\n  }\n}": typeof types.Utility_PurchaseAirtimeDocument,
    "mutation WalletCrypto_create {\n  walletCrypto_create {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nquery WalletCrypto_getAll {\n  walletCrypto_getAll {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}": typeof types.WalletCrypto_CreateDocument,
};
const documents: Documents = {
    "mutation Adverts_update($input: Advert_UpdateInput!) {\n  adverts_update(input: $input) {\n    currencyFiat\n    currency_crypto\n    advertStatus\n    duration\n    merchant_id\n    limitLower\n    limitUpper\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n  }\n}\n\nmutation Adverts_create($input: Advert_CreateInput!) {\n  adverts_create(input: $input) {\n    rateFixed\n    rateFloat\n    merchant_id\n    isFloatRate\n    advertStatus\n    limitLower\n    limitUpper\n    tradeType\n    currencyFiat\n    currency_crypto\n    wallet_address\n  }\n}\n\nmutation Adverts_delete($input: Advert_DeleteInput!) {\n  adverts_delete(input: $input) {\n    merchant_id\n    rateFixed\n    rateFloat\n    isFloatRate\n    currencyFiat\n    currency_crypto\n    advertStatus\n    duration\n    limitLower\n    limitUpper\n    tradeType\n    wallet_address\n  }\n}\n\nquery Adverts_getAll {\n  adverts_getAll {\n    id\n    rateFixed\n    rateFloat\n    isFloatRate\n    advertStatus\n    duration\n    tradeType\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}\n\nquery Adverts_getOne($input: Advert_GetOneInput!) {\n  adverts_getOne(input: $input) {\n    id\n    advertStatus\n    duration\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}\n\nquery Adverts_getMerchantAdverts($input: Advert_GetAllInput!) {\n  adverts_getMerchantAdverts(input: $input) {\n    id\n    advertStatus\n    duration\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}": types.Adverts_UpdateDocument,
    "mutation Auth_minipayLogin($input: Auth_LoginMinipayInput!) {\n  auth_minipayLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_minipayCreateAccount($input: Auth_MinipayCreateAccountInput!) {\n  auth_minipayCreateAccount(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_login($input: Auth_LoginInput!) {\n  auth_login(input: $input) {\n    firstname\n    country\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_resetPassword($input: Auth_ResetPasswordInput!) {\n  auth_resetPassword(input: $input) {\n    message\n  }\n}\n\nmutation Auth_sendEmailOtp($input: Auth_sendEmailOtpInput!) {\n  auth_sendEmailOtp(input: $input) {\n    message\n    token\n  }\n}\n\nmutation Auth_verifyEmailOtp($input: Auth_verifyEmailOtpInput!) {\n  auth_verifyEmailOtp(input: $input) {\n    message\n  }\n}\n\nmutation Auth_CreateAccount($input: Auth_CreateAccountInput!) {\n  auth_createAccount(input: $input) {\n    message\n  }\n}\n\nmutation Auth_thirdwebLogin($input: Auth_ThirdwebLoginInput!) {\n  auth_thirdwebLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}": types.Auth_MinipayLoginDocument,
    "mutation BankAccount_delete($input: BankAccount_DeleteInput!) {\n  bankAccount_delete(input: $input) {\n    message\n  }\n}\n\nmutation BankAccount_create($input: BankAccount_CreateInput!) {\n  bankAccount_create(input: $input) {\n    id\n    account_no\n    account_name\n    bank_name\n  }\n}\n\nquery BankAccount_getAll {\n  bankAccount_getAll {\n    id\n    account_name\n    account_no\n    bank_name\n  }\n}\n\nquery BankList {\n  bankList {\n    bankCode\n    bankName\n  }\n}\n\nquery Bank_verifyAccountNo($input: BankGetAccountName_Input!) {\n  bank_verifyAccountNo(input: $input) {\n    account_name\n    account_number\n  }\n}": types.BankAccount_DeleteDocument,
    "query FxRate_GetAll {\n  fxRate_GetAll {\n    GH\n    NG\n    KE\n    UG\n    MW\n    TZ\n    ZA\n    USD\n    EUR\n  }\n}": types.FxRate_GetAllDocument,
    "mutation Kyc_addAddressInfo($input: Kyc_AddAddressInfoInput!) {\n  kyc_addAddressInfo(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addAddressProof($input: Kyc_AddAddressProofInput!) {\n  kyc_addAddressProof(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addBvn($input: Kyc_AddBvnInput!) {\n  kyc_addBvn(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addDob($input: Kyc_AddDobInput!) {\n  kyc_addDob(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNames($input: Kyc_AddNamesInput!) {\n  kyc_addNames(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNin($input: Kyc_AddNinInput!) {\n  kyc_addNin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_createTransactionPin($input: Kyc_CreateTransactionPinInput!) {\n  kyc_createTransactionPin(input: $input) {\n    message\n  }\n}": types.Kyc_AddAddressInfoDocument,
    "mutation Orders_CreateSell($input: Order_CreteSellInput!) {\n  orders_CreateSell(input: $input) {\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetAll($input: Order_GetAllInput!) {\n  orders_GetAll(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetOne($input: Order_GetOneInput!) {\n  orders_GetOne(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetAllForAdmin($input: Order_GetAllInput!) {\n  orders_GetAllForAdmin(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}": types.Orders_CreateSellDocument,
    "mutation Auth_TelegramLogin($input: Auth_TelegramLoginInput!) {\n  auth_loginTelegram(input: $input) {\n    token\n    email\n    firstname\n    lastname\n  }\n}": types.Auth_TelegramLoginDocument,
    "query Transactions_getAll {\n  transactions_getAll {\n    amount\n    category\n    mode\n    note\n    transaction_hash\n    status\n  }\n}": types.Transactions_GetAllDocument,
    "query User_getAll {\n  user_getAll {\n    telegram_id\n    id\n    country\n    phone\n    firstname\n    lastname\n    middlename\n    email\n  }\n}": types.User_GetAllDocument,
    "mutation Utility_purchaseAirtime($input: Utilities_PurchaseAirtimeInput!) {\n  utility_purchaseAirtime(input: $input) {\n    message\n  }\n}\n\nmutation Utility_purchaseDataBundle($input: Utilities_PurchaseDataBundleInput!) {\n  utility_purchaseDataBundle(input: $input) {\n    message\n  }\n}": types.Utility_PurchaseAirtimeDocument,
    "mutation WalletCrypto_create {\n  walletCrypto_create {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nquery WalletCrypto_getAll {\n  walletCrypto_getAll {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}": types.WalletCrypto_CreateDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Adverts_update($input: Advert_UpdateInput!) {\n  adverts_update(input: $input) {\n    currencyFiat\n    currency_crypto\n    advertStatus\n    duration\n    merchant_id\n    limitLower\n    limitUpper\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n  }\n}\n\nmutation Adverts_create($input: Advert_CreateInput!) {\n  adverts_create(input: $input) {\n    rateFixed\n    rateFloat\n    merchant_id\n    isFloatRate\n    advertStatus\n    limitLower\n    limitUpper\n    tradeType\n    currencyFiat\n    currency_crypto\n    wallet_address\n  }\n}\n\nmutation Adverts_delete($input: Advert_DeleteInput!) {\n  adverts_delete(input: $input) {\n    merchant_id\n    rateFixed\n    rateFloat\n    isFloatRate\n    currencyFiat\n    currency_crypto\n    advertStatus\n    duration\n    limitLower\n    limitUpper\n    tradeType\n    wallet_address\n  }\n}\n\nquery Adverts_getAll {\n  adverts_getAll {\n    id\n    rateFixed\n    rateFloat\n    isFloatRate\n    advertStatus\n    duration\n    tradeType\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}\n\nquery Adverts_getOne($input: Advert_GetOneInput!) {\n  adverts_getOne(input: $input) {\n    id\n    advertStatus\n    duration\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}\n\nquery Adverts_getMerchantAdverts($input: Advert_GetAllInput!) {\n  adverts_getMerchantAdverts(input: $input) {\n    id\n    advertStatus\n    duration\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}"): (typeof documents)["mutation Adverts_update($input: Advert_UpdateInput!) {\n  adverts_update(input: $input) {\n    currencyFiat\n    currency_crypto\n    advertStatus\n    duration\n    merchant_id\n    limitLower\n    limitUpper\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n  }\n}\n\nmutation Adverts_create($input: Advert_CreateInput!) {\n  adverts_create(input: $input) {\n    rateFixed\n    rateFloat\n    merchant_id\n    isFloatRate\n    advertStatus\n    limitLower\n    limitUpper\n    tradeType\n    currencyFiat\n    currency_crypto\n    wallet_address\n  }\n}\n\nmutation Adverts_delete($input: Advert_DeleteInput!) {\n  adverts_delete(input: $input) {\n    merchant_id\n    rateFixed\n    rateFloat\n    isFloatRate\n    currencyFiat\n    currency_crypto\n    advertStatus\n    duration\n    limitLower\n    limitUpper\n    tradeType\n    wallet_address\n  }\n}\n\nquery Adverts_getAll {\n  adverts_getAll {\n    id\n    rateFixed\n    rateFloat\n    isFloatRate\n    advertStatus\n    duration\n    tradeType\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}\n\nquery Adverts_getOne($input: Advert_GetOneInput!) {\n  adverts_getOne(input: $input) {\n    id\n    advertStatus\n    duration\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}\n\nquery Adverts_getMerchantAdverts($input: Advert_GetAllInput!) {\n  adverts_getMerchantAdverts(input: $input) {\n    id\n    advertStatus\n    duration\n    tradeType\n    rateFixed\n    rateFloat\n    isFloatRate\n    instructions\n    limitLower\n    limitUpper\n    currencyFiat\n    currency_crypto\n    wallet_address\n    merchant_nickname\n    merchant_id\n    merchant_trade_count\n    wallet_address\n    fiatAmountPerCrypto\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Auth_minipayLogin($input: Auth_LoginMinipayInput!) {\n  auth_minipayLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_minipayCreateAccount($input: Auth_MinipayCreateAccountInput!) {\n  auth_minipayCreateAccount(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_login($input: Auth_LoginInput!) {\n  auth_login(input: $input) {\n    firstname\n    country\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_resetPassword($input: Auth_ResetPasswordInput!) {\n  auth_resetPassword(input: $input) {\n    message\n  }\n}\n\nmutation Auth_sendEmailOtp($input: Auth_sendEmailOtpInput!) {\n  auth_sendEmailOtp(input: $input) {\n    message\n    token\n  }\n}\n\nmutation Auth_verifyEmailOtp($input: Auth_verifyEmailOtpInput!) {\n  auth_verifyEmailOtp(input: $input) {\n    message\n  }\n}\n\nmutation Auth_CreateAccount($input: Auth_CreateAccountInput!) {\n  auth_createAccount(input: $input) {\n    message\n  }\n}\n\nmutation Auth_thirdwebLogin($input: Auth_ThirdwebLoginInput!) {\n  auth_thirdwebLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}"): (typeof documents)["mutation Auth_minipayLogin($input: Auth_LoginMinipayInput!) {\n  auth_minipayLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_minipayCreateAccount($input: Auth_MinipayCreateAccountInput!) {\n  auth_minipayCreateAccount(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_login($input: Auth_LoginInput!) {\n  auth_login(input: $input) {\n    firstname\n    country\n    lastname\n    middlename\n    email\n    token\n  }\n}\n\nmutation Auth_resetPassword($input: Auth_ResetPasswordInput!) {\n  auth_resetPassword(input: $input) {\n    message\n  }\n}\n\nmutation Auth_sendEmailOtp($input: Auth_sendEmailOtpInput!) {\n  auth_sendEmailOtp(input: $input) {\n    message\n    token\n  }\n}\n\nmutation Auth_verifyEmailOtp($input: Auth_verifyEmailOtpInput!) {\n  auth_verifyEmailOtp(input: $input) {\n    message\n  }\n}\n\nmutation Auth_CreateAccount($input: Auth_CreateAccountInput!) {\n  auth_createAccount(input: $input) {\n    message\n  }\n}\n\nmutation Auth_thirdwebLogin($input: Auth_ThirdwebLoginInput!) {\n  auth_thirdwebLogin(input: $input) {\n    firstname\n    lastname\n    middlename\n    email\n    token\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation BankAccount_delete($input: BankAccount_DeleteInput!) {\n  bankAccount_delete(input: $input) {\n    message\n  }\n}\n\nmutation BankAccount_create($input: BankAccount_CreateInput!) {\n  bankAccount_create(input: $input) {\n    id\n    account_no\n    account_name\n    bank_name\n  }\n}\n\nquery BankAccount_getAll {\n  bankAccount_getAll {\n    id\n    account_name\n    account_no\n    bank_name\n  }\n}\n\nquery BankList {\n  bankList {\n    bankCode\n    bankName\n  }\n}\n\nquery Bank_verifyAccountNo($input: BankGetAccountName_Input!) {\n  bank_verifyAccountNo(input: $input) {\n    account_name\n    account_number\n  }\n}"): (typeof documents)["mutation BankAccount_delete($input: BankAccount_DeleteInput!) {\n  bankAccount_delete(input: $input) {\n    message\n  }\n}\n\nmutation BankAccount_create($input: BankAccount_CreateInput!) {\n  bankAccount_create(input: $input) {\n    id\n    account_no\n    account_name\n    bank_name\n  }\n}\n\nquery BankAccount_getAll {\n  bankAccount_getAll {\n    id\n    account_name\n    account_no\n    bank_name\n  }\n}\n\nquery BankList {\n  bankList {\n    bankCode\n    bankName\n  }\n}\n\nquery Bank_verifyAccountNo($input: BankGetAccountName_Input!) {\n  bank_verifyAccountNo(input: $input) {\n    account_name\n    account_number\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FxRate_GetAll {\n  fxRate_GetAll {\n    GH\n    NG\n    KE\n    UG\n    MW\n    TZ\n    ZA\n    USD\n    EUR\n  }\n}"): (typeof documents)["query FxRate_GetAll {\n  fxRate_GetAll {\n    GH\n    NG\n    KE\n    UG\n    MW\n    TZ\n    ZA\n    USD\n    EUR\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Kyc_addAddressInfo($input: Kyc_AddAddressInfoInput!) {\n  kyc_addAddressInfo(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addAddressProof($input: Kyc_AddAddressProofInput!) {\n  kyc_addAddressProof(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addBvn($input: Kyc_AddBvnInput!) {\n  kyc_addBvn(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addDob($input: Kyc_AddDobInput!) {\n  kyc_addDob(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNames($input: Kyc_AddNamesInput!) {\n  kyc_addNames(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNin($input: Kyc_AddNinInput!) {\n  kyc_addNin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_createTransactionPin($input: Kyc_CreateTransactionPinInput!) {\n  kyc_createTransactionPin(input: $input) {\n    message\n  }\n}"): (typeof documents)["mutation Kyc_addAddressInfo($input: Kyc_AddAddressInfoInput!) {\n  kyc_addAddressInfo(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addAddressProof($input: Kyc_AddAddressProofInput!) {\n  kyc_addAddressProof(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addBvn($input: Kyc_AddBvnInput!) {\n  kyc_addBvn(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addDob($input: Kyc_AddDobInput!) {\n  kyc_addDob(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNames($input: Kyc_AddNamesInput!) {\n  kyc_addNames(input: $input) {\n    message\n  }\n}\n\nmutation kyc_addNin($input: Kyc_AddNinInput!) {\n  kyc_addNin(input: $input) {\n    message\n  }\n}\n\nmutation kyc_createTransactionPin($input: Kyc_CreateTransactionPinInput!) {\n  kyc_createTransactionPin(input: $input) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Orders_CreateSell($input: Order_CreteSellInput!) {\n  orders_CreateSell(input: $input) {\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetAll($input: Order_GetAllInput!) {\n  orders_GetAll(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetOne($input: Order_GetOneInput!) {\n  orders_GetOne(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetAllForAdmin($input: Order_GetAllInput!) {\n  orders_GetAllForAdmin(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}"): (typeof documents)["mutation Orders_CreateSell($input: Order_CreteSellInput!) {\n  orders_CreateSell(input: $input) {\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetAll($input: Order_GetAllInput!) {\n  orders_GetAll(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetOne($input: Order_GetOneInput!) {\n  orders_GetOne(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}\n\nquery Orders_GetAllForAdmin($input: Order_GetAllInput!) {\n  orders_GetAllForAdmin(input: $input) {\n    id\n    action_user\n    status\n    amount_fiat\n    amount_crypto\n    bank_id\n    amount_crypto\n    currency_fiat\n    currency_crypto\n    estimated_duration\n    merchant_id\n    status\n    trade_type\n    wallet_customer\n    wallet_merchant\n    action_user\n    action_merchant\n    mode\n    txn_hash\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Auth_TelegramLogin($input: Auth_TelegramLoginInput!) {\n  auth_loginTelegram(input: $input) {\n    token\n    email\n    firstname\n    lastname\n  }\n}"): (typeof documents)["mutation Auth_TelegramLogin($input: Auth_TelegramLoginInput!) {\n  auth_loginTelegram(input: $input) {\n    token\n    email\n    firstname\n    lastname\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Transactions_getAll {\n  transactions_getAll {\n    amount\n    category\n    mode\n    note\n    transaction_hash\n    status\n  }\n}"): (typeof documents)["query Transactions_getAll {\n  transactions_getAll {\n    amount\n    category\n    mode\n    note\n    transaction_hash\n    status\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query User_getAll {\n  user_getAll {\n    telegram_id\n    id\n    country\n    phone\n    firstname\n    lastname\n    middlename\n    email\n  }\n}"): (typeof documents)["query User_getAll {\n  user_getAll {\n    telegram_id\n    id\n    country\n    phone\n    firstname\n    lastname\n    middlename\n    email\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Utility_purchaseAirtime($input: Utilities_PurchaseAirtimeInput!) {\n  utility_purchaseAirtime(input: $input) {\n    message\n  }\n}\n\nmutation Utility_purchaseDataBundle($input: Utilities_PurchaseDataBundleInput!) {\n  utility_purchaseDataBundle(input: $input) {\n    message\n  }\n}"): (typeof documents)["mutation Utility_purchaseAirtime($input: Utilities_PurchaseAirtimeInput!) {\n  utility_purchaseAirtime(input: $input) {\n    message\n  }\n}\n\nmutation Utility_purchaseDataBundle($input: Utilities_PurchaseDataBundleInput!) {\n  utility_purchaseDataBundle(input: $input) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation WalletCrypto_create {\n  walletCrypto_create {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nquery WalletCrypto_getAll {\n  walletCrypto_getAll {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}"): (typeof documents)["mutation WalletCrypto_create {\n  walletCrypto_create {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}\n\nquery WalletCrypto_getAll {\n  walletCrypto_getAll {\n    address\n    chainType\n    id\n    wallet_id\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;